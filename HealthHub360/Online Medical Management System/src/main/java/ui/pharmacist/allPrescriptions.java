/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.pharmacist;

import java.awt.CardLayout;
import java.sql.SQLException;

import java.util.ArrayList;

import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.User;
import modelPharmacyEnterprise.Prescription;
import modelPharmacyEnterpriseDAO.PrescriptionDAO;
import modelPharmacyEnterpriseService.PrescriptionService;

/**
 *
 * @author keerthichandrakanth
 */
public class allPrescriptions extends javax.swing.JPanel {
    JPanel mainWorkArea;
    private User loggedInUser;
    private List<Prescription> prescriptions;

    /**
     * Creates new form allPrescriptions
     */
    public allPrescriptions(JPanel mainWorkArea,User currentUser) {
        this.mainWorkArea = mainWorkArea;
        this.loggedInUser = currentUser;
          initComponents();  // Initialize the components first

          populatePrescription("All"); 

    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrescriptions = new javax.swing.JTable();
        btnViewAssignedPrescription = new javax.swing.JButton();

        cmbFilterPharmacistBasedPrescription = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(247, 249, 252));

        tblPrescriptions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Prescription ID", "Patient Name", "Doctor Name", "Assigned Date", "Status", "Payment Status"
            }
        ));
        jScrollPane1.setViewportView(tblPrescriptions);

        btnViewAssignedPrescription.setText("View Prescription");
        btnViewAssignedPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAssignedPrescriptionActionPerformed(evt);
            }
        });

        cmbFilterPharmacistBasedPrescription.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Assigned to pharmacist", "Completed" }));
        cmbFilterPharmacistBasedPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFilterPharmacistBasedPrescriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)

                    .addGroup(layout.createSequentialGroup()
                        .addGap(762, 762, 762)
                        .addComponent(cmbFilterPharmacistBasedPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 804, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(65, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnViewAssignedPrescription)
                .addGap(409, 409, 409))

        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(cmbFilterPharmacistBasedPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)

                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnViewAssignedPrescription)

                .addContainerGap())

        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewAssignedPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAssignedPrescriptionActionPerformed
        // TODO add your handling code here:
             // Get the selected row from the prescriptions table
      int selectedRow = tblPrescriptions.getSelectedRow();
      if (selectedRow != -1) {
      int prescriptionId = (int) tblPrescriptions.getValueAt(selectedRow, 0);
      
         prescriptionAssigned ap = new prescriptionAssigned(mainWorkArea, prescriptionId);
         mainWorkArea.add("all Prescriptin ", ap);
         CardLayout layout = (CardLayout) mainWorkArea.getLayout();
         layout.next(mainWorkArea); 
    
    } else {
        // Show a message if no row is selected
        JOptionPane.showMessageDialog(this, "Please select a prescription to view.", "No Prescription Selected", JOptionPane.WARNING_MESSAGE);
    }

    }//GEN-LAST:event_btnViewAssignedPrescriptionActionPerformed


    private void cmbFilterPharmacistBasedPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFilterPharmacistBasedPrescriptionActionPerformed
        // TODO add your handling code here:
            String selectedStatus = (String) cmbFilterPharmacistBasedPrescription.getSelectedItem();
             populatePrescription(selectedStatus); 
    }//GEN-LAST:event_cmbFilterPharmacistBasedPrescriptionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewAssignedPrescription;
    private javax.swing.JComboBox<String> cmbFilterPharmacistBasedPrescription;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPrescriptions;
    // End of variables declaration//GEN-END:variables


    private void populatePrescription(String filterStatus) {
    try {
        // Fetch prescriptions for the logged-in pharmacist
        PrescriptionService prescriptionService = new PrescriptionService(new PrescriptionDAO());
        List<Object[]> prescriptions = prescriptionService.getPrescriptionsByPharmacistId(loggedInUser.getId());

        System.out.println("Fetched prescriptions: " + prescriptions);

        // Get the table model
        DefaultTableModel model = (DefaultTableModel) tblPrescriptions.getModel();
        model.setRowCount(0); // Clear any previous rows

        // Filter prescriptions based on status
        List<Object[]> filteredPrescriptions = new ArrayList<>();

        // If "All" is selected, show all prescriptions; otherwise filter by status
        for (Object[] row : prescriptions) {
            String status = (String) row[4];  // Assuming the status is the 5th element (index 4)

            // If the filterStatus is "All", add all rows; otherwise, filter by status
            if ("All".equals(filterStatus) || filterStatus.equals(status)) {
                filteredPrescriptions.add(row);
            }
        }

        // Add each filtered row of data to the table
        for (Object[] row : filteredPrescriptions) {
            model.addRow(new Object[]{
                row[0], // Prescription ID
                row[1], // Patient Name
                row[2], // Doctor Name
                row[3], // Assigned Date
                row[4],//Status
                row[5]// Payment Status
            });
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error fetching prescriptions: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
}


       
}
