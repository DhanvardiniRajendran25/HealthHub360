/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.ChatUI;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import modelChatSupportDAO.ChatSessionDAO;
import modelChatSupportDAO.ChatMessageDAO;
import modelChatSupportDAO.PredefinedQuestionDAO;
import model.ChatSupport.ChatSession;
import model.ChatSupport.ChatMessage;
import model.ChatSupport.PredefinedQuestions;

/**
 *
 * @author rdhan
 */
public class ChatUI extends javax.swing.JPanel {


    /**
     * Creates new form ChatUIPanel
     */
    public ChatUI() throws SQLException {
        initComponents();
        populateChatSessions();
        populatePredefinedQuestions();
    }
    
    
    private void populateChatSessions() throws SQLException {
    ChatSessionDAO dao = new ChatSessionDAO();
    List<ChatSession> sessions = dao.getAllChatSessions();
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    
    for (ChatSession session : sessions) {
        model.addElement("Session ID: " + session.getSessionId() + " (Patient ID: " + session.getPatientId() + ")");
    }
    
    predefinedQuestionsBox.setModel(model);
    predefinedQuestionsBox.addActionListener(e -> loadChatMessages());
}

private void populatePredefinedQuestions() throws SQLException {
    PredefinedQuestionDAO dao = new PredefinedQuestionDAO();
    List<PredefinedQuestions> questions = dao.getPredefinedQuestions();
    
    if (questions.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No predefined questions found.");
        return;
    }
    
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    for (PredefinedQuestions question : questions) {
        model.addElement(question.getQuestionText());
    }
    predefinedQuestionsBox.setModel(model);
    predefinedQuestionsBox.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            String selectedQuestion = (String) predefinedQuestionsBox.getSelectedItem();
            questionsTxt.setText(selectedQuestion);  // Set selected question in the text field
        }
    });
}

    private void loadChatMessages() {
        int sessionId = Integer.parseInt(predefinedQuestionsBox.getSelectedItem().toString().split(":")[1].split("\\(")[0].trim());
        ChatMessageDAO messageDAO = new ChatMessageDAO();
        List<ChatMessage> messages = messageDAO.getMessagesBySessionId(sessionId);
        
        StringBuilder chatHistory = new StringBuilder();
        for (ChatMessage message : messages) {
            chatHistory.append("Sender: ").append(message.getSenderId()).append(" -> ").append(message.getMessageText()).append("\n");
        }

        chatArea.setText(chatHistory.toString());
    }

    private void handleSendMessage() {
        String userQuestion = questionsTxt.getText();
        if (!userQuestion.isEmpty()) {
            // Simulate the sending of a message, append it to the chatArea
            chatArea.append("You: " + userQuestion + "\n");
            questionsTxt.setText("");

            // Simulate a response
            String response = "Simulated response to the question: " + userQuestion;
            chatArea.append("Support: " + response + "\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        predefinedQuestionsBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        questionsTxt = new javax.swing.JTextField();
        sendbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Patient Chat Support");

        jLabel1.setText("If you have any questions! Please check...");

        predefinedQuestionsBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        predefinedQuestionsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predefinedQuestionsBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Your questions please!");

        questionsTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionsTxtActionPerformed(evt);
            }
        });

        sendbtn.setText("Ask Me Anything!");
        sendbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendbtnActionPerformed(evt);
            }
        });

        chatArea.setColumns(20);
        chatArea.setRows(5);
        jScrollPane1.setViewportView(chatArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(sendbtn))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(predefinedQuestionsBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(questionsTxt))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34)
                        .addComponent(predefinedQuestionsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(jLabel3)
                        .addGap(29, 29, 29)
                        .addComponent(questionsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(sendbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 178, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void predefinedQuestionsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predefinedQuestionsBoxActionPerformed
        // TODO add your handling code here:
        String selectedQuestion = (String) predefinedQuestionsBox.getSelectedItem();
        // Set the selected question in the questions text field
        questionsTxt.setText(selectedQuestion);
    }//GEN-LAST:event_predefinedQuestionsBoxActionPerformed

    private void questionsTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionsTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_questionsTxtActionPerformed

    private void sendbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendbtnActionPerformed
        // TODO add your handling code here:
        String userQuestion = questionsTxt.getText();

        if (!userQuestion.isEmpty()) {
            // Append the user's question to the chat area
            chatArea.append("You: " + userQuestion + "\n");

            // Clear the text field after sending the message
            questionsTxt.setText("");

            // Simulate a response from the support team
            String response = getResponse(userQuestion);  // Get the response based on the question
            chatArea.append("Support: " + response + "\n");
        }
    }//GEN-LAST:event_sendbtnActionPerformed

    
    private String getResponse(String userQuestion) {
        // Simulate the response based on the user's question
        switch (userQuestion) {
            case "How do I book an appointment?":
                return "To book an appointment, please visit the 'Appointments' section of your dashboard.";
            case "How can I check my test results?":
                return "You can check your test results in the 'Lab Tests' section.";
            case "How do I contact customer support?":
                return "You can contact support by emailing support@example.com or calling 123-456-7890.";
            case "What is my medical history?":
                return "Your medical history includes all previous diagnoses and treatments. You can view it under 'Medical Records'.";
            default:
                return "Sorry, I didn't understand that question. Please try again.";
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> predefinedQuestionsBox;
    private javax.swing.JTextField questionsTxt;
    private javax.swing.JButton sendbtn;
    // End of variables declaration//GEN-END:variables
}
