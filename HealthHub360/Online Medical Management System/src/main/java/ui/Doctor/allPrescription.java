/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Doctor;

import java.awt.CardLayout;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.User;
import modelPharmacyEnterpriseDAO.PrescriptionDAO;
import modelPharmacyEnterpriseService.PrescriptionService;
import ui.pharmacist.prescriptionAssigned;

/**
 *
 * @author keerthichandrakanth
 */
public class allPrescription extends javax.swing.JPanel {
      JPanel mainWorkArea;
      private int loggedInUser;
    /**
     * Creates new form allPrescription
     */
    public allPrescription(JPanel mainWorkArea,int currentUser) throws SQLException {
        this.mainWorkArea = mainWorkArea;
        this.loggedInUser = currentUser;
          initComponents();
        populatePrescription("All");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbFilterPharmacistBasedPrescription = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrescriptions = new javax.swing.JTable();

        cmbFilterPharmacistBasedPrescription.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Assigned to pharmacist", "Completed" }));
        cmbFilterPharmacistBasedPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFilterPharmacistBasedPrescriptionActionPerformed(evt);
            }
        });

        tblPrescriptions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Prescription ID", "Patient Name", "Doctor Name", "Assigned Date", "Status", "Payment Status"
            }
        ));
        jScrollPane1.setViewportView(tblPrescriptions);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()

                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbFilterPharmacistBasedPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(65, 65, 65))

        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(cmbFilterPharmacistBasedPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)

                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(129, 129, 129))

        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFilterPharmacistBasedPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFilterPharmacistBasedPrescriptionActionPerformed
        // TODO add your handling code here:
        String selectedStatus = (String) cmbFilterPharmacistBasedPrescription.getSelectedItem();
          try {
              populatePrescription(selectedStatus);
          } catch (SQLException ex) {
              Logger.getLogger(allPrescription.class.getName()).log(Level.SEVERE, null, ex);
          }
    }//GEN-LAST:event_cmbFilterPharmacistBasedPrescriptionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbFilterPharmacistBasedPrescription;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPrescriptions;
    // End of variables declaration//GEN-END:variables

     
    private void populatePrescription(String filterStatus) throws SQLException {
        // Fetch prescriptions for the logged-in pharmacist
        PrescriptionService prescriptionService = new PrescriptionService(new PrescriptionDAO());
        List<Object[]> prescriptions = prescriptionService.getPrescriptionsByDocotorId(loggedInUser);
        System.out.println("Fetched prescriptions: " + prescriptions);
        // Get the table model
        DefaultTableModel model = (DefaultTableModel) tblPrescriptions.getModel();
        model.setRowCount(0); // Clear any previous rows
        // Filter prescriptions based on status
        List<Object[]> filteredPrescriptions = new ArrayList<>();
        // If "All" is selected, show all prescriptions; otherwise filter by status
        for (Object[] row : prescriptions) {
            String status = (String) row[4];  // Assuming the status is the 5th element (index 4)

            // If the filterStatus is "All", add all rows; otherwise, filter by status
            if ("All".equals(filterStatus) || filterStatus.equals(status)) {
                filteredPrescriptions.add(row);
            }
        }
        // Add each filtered row of data to the table
        for (Object[] row : filteredPrescriptions) {
            model.addRow(new Object[]{
                row[0], // Prescription ID (Integer)
                row[1], // Patient Name (String)
                row[2], // Doctor Name (String)
                row[4], // Status (String)
                row[5]  // Payment Status (String)
            });
        }
}



}
