/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.labTechnician;

import java.awt.CardLayout;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import model.DiagnosticLabEnterprise.TestRequest;
import model.DiagnosticLabEnterpriseService.LabTechnicianService;
import ui.DatabaseUtil;
import ui.LoginScreen;

/**
 *
 * @author AnjanaSruthiR
 */
public class LabTechnicianDashboard extends javax.swing.JPanel {

    private LabTechnicianService labTechnicianService;
    private int loggedInTechnicianId;

    /**
     * Creates new form LabTechnicianDashboard
     */
    public LabTechnicianDashboard(int technicianId, Connection connection) {
        this.loggedInTechnicianId = technicianId;
        this.labTechnicianService = new LabTechnicianService(connection);
        initComponents();
        
        populateTable();
        populateReportsTable();
        SwingUtilities.invokeLater(this::notifyNewRequests);

    }

    private int selectedTestRequestId = -1; // Default to -1 indicating no selection

    public void notifyNewRequests() {
        try {
            List<Map<String, Object>> newRequests = labTechnicianService.getNewRequestsForTechnician(loggedInTechnicianId);

            if (!newRequests.isEmpty()) {
                StringBuilder message = new StringBuilder("You have new requests assigned:\n");
                for (Map<String, Object> request : newRequests) {
                    message.append("Request ID: ").append(request.get("ID")).append("\n")
                            .append("Type: ").append(request.get("Type")).append("\n")
                            .append("Description: ").append(request.get("Description")).append("\n")
                            .append("Assigned Date: ").append(request.get("Date")).append("\n\n");
                }
                JOptionPane.showMessageDialog(this, message.toString(), "New Requests", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No new requests assigned.", "New Requests", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error checking for new requests: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateTable() {
        try {
            List<Map<String, Object>> testRequests = labTechnicianService.getTestRequestsByTechnicianId(loggedInTechnicianId);

            DefaultTableModel model = (DefaultTableModel) TblTestRequests.getModel();
            model.setRowCount(0); // Clear existing rows

            for (Map<String, Object> request : testRequests) {
                model.addRow(new Object[]{
                    request.get("RequestID"),
                    request.get("TestType"),
                    request.get("PatientName"),
                    request.get("Status")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading test requests.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblTestRequests = new javax.swing.JTable();
        CmbFilStatus = new javax.swing.JComboBox<>();
        BtnUpdateStatus = new javax.swing.JButton();
        BtnViewDetails = new javax.swing.JButton();
        BtnGenerateReport = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        LblRequestID = new javax.swing.JLabel();
        TxtRequestID = new javax.swing.JTextField();
        BtnSubmit = new javax.swing.JButton();
        LblTestType = new javax.swing.JLabel();
        TxtTestType = new javax.swing.JTextField();
        LblTechID = new javax.swing.JLabel();
        TxtTechID = new javax.swing.JTextField();
        LblPatient = new javax.swing.JLabel();
        TxtPatient = new javax.swing.JTextField();
        TxtDate = new javax.swing.JTextField();
        LblDate = new javax.swing.JLabel();
        LblResult = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtResult = new javax.swing.JTextArea();
        BtnClear = new javax.swing.JButton();
        BtnBack = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TblReports = new javax.swing.JTable();
        CmbFilDate = new javax.swing.JComboBox<>();
        BtnResult = new javax.swing.JButton();
        BtnUpdate = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        BtnLogOut1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jTabbedPane1.setBackground(new java.awt.Color(192, 215, 249));

        jPanel1.setBackground(new java.awt.Color(247, 249, 252));

        TblTestRequests.setBackground(new java.awt.Color(187, 208, 237));
        TblTestRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Request ID", "Test Type", "Patient ID", "Status"
            }
        ));
        jScrollPane1.setViewportView(TblTestRequests);

        CmbFilStatus.setBackground(new java.awt.Color(215, 191, 204));
        CmbFilStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "In Progress", "Completed", "Pending Review", "Assigned", "Processed" }));
        CmbFilStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmbFilStatusActionPerformed(evt);
            }
        });

        BtnUpdateStatus.setText("Update Status");
        BtnUpdateStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateStatusActionPerformed(evt);
            }
        });

        BtnViewDetails.setText("View Details");
        BtnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnViewDetailsActionPerformed(evt);
            }
        });

        BtnGenerateReport.setText("Create Lab Report");
        BtnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGenerateReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(CmbFilStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(BtnUpdateStatus)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BtnViewDetails)
                            .addGap(18, 18, 18)
                            .addComponent(BtnGenerateReport))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 815, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(CmbFilStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnUpdateStatus)
                    .addComponent(BtnViewDetails)
                    .addComponent(BtnGenerateReport))
                .addContainerGap(84, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Work Requests", jPanel1);

        jPanel2.setBackground(new java.awt.Color(247, 249, 252));

        LblRequestID.setText("Request ID");

        TxtRequestID.setEnabled(false);
        TxtRequestID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtRequestIDActionPerformed(evt);
            }
        });

        BtnSubmit.setText("Submit Report");
        BtnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSubmitActionPerformed(evt);
            }
        });

        LblTestType.setText("Test Type");

        TxtTestType.setEnabled(false);
        TxtTestType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtTestTypeActionPerformed(evt);
            }
        });

        LblTechID.setText("Technician ID");

        TxtTechID.setEnabled(false);
        TxtTechID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtTechIDActionPerformed(evt);
            }
        });

        LblPatient.setText("Patient Name");

        TxtPatient.setEnabled(false);
        TxtPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtPatientActionPerformed(evt);
            }
        });

        LblDate.setText("Date");

        LblResult.setText("Result");

        TxtResult.setColumns(20);
        TxtResult.setRows(5);
        jScrollPane2.setViewportView(TxtResult);

        BtnClear.setText("Clear Form");
        BtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnClearActionPerformed(evt);
            }
        });

        BtnBack.setText("Back to Requests");
        BtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(LblDate)
                                .addGap(18, 18, 18)
                                .addComponent(TxtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(LblResult)
                                .addGap(42, 42, 42)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(BtnSubmit)
                                    .addComponent(BtnClear)
                                    .addComponent(BtnBack)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(LblRequestID)
                        .addGap(18, 18, 18)
                        .addComponent(TxtRequestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(LblTestType)
                        .addGap(18, 18, 18)
                        .addComponent(TxtTestType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(LblPatient)
                        .addGap(18, 18, 18)
                        .addComponent(TxtPatient)
                        .addGap(18, 18, 18)
                        .addComponent(LblTechID)
                        .addGap(18, 18, 18)
                        .addComponent(TxtTechID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(61, 61, 61))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LblRequestID)
                    .addComponent(TxtRequestID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblTechID)
                    .addComponent(TxtTechID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblTestType)
                    .addComponent(TxtTestType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LblPatient)
                    .addComponent(TxtPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LblResult)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(BtnSubmit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BtnClear))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TxtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LblDate))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BtnBack)))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Create Lab Reports", jPanel2);

        jPanel4.setBackground(new java.awt.Color(247, 249, 252));

        TblReports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Report ID", "Request ID", "Test Type", "Patient Name", "Technician Name", "Generated Date"
            }
        ));
        jScrollPane3.setViewportView(TblReports);

        CmbFilDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Today", "Last 7 days", "Last 30 Days", "Last 3 Months", "Last 1 year" }));
        CmbFilDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CmbFilDateActionPerformed(evt);
            }
        });

        BtnResult.setText("Result Details");
        BtnResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnResultActionPerformed(evt);
            }
        });

        BtnUpdate.setText("Update Report");
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(BtnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(BtnResult))
                    .addComponent(CmbFilDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 816, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(CmbFilDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnResult)
                    .addComponent(BtnUpdate))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Lab Reports", jPanel4);

        jPanel3.setBackground(new java.awt.Color(247, 249, 252));

        BtnLogOut1.setBackground(new java.awt.Color(199, 180, 127));
        BtnLogOut1.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        BtnLogOut1.setText("<- Log Out");
        BtnLogOut1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLogOut1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Welcome Lab Technician");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(BtnLogOut1)
                .addGap(120, 120, 120)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BtnLogOut1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void CmbFilStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmbFilStatusActionPerformed
        String selectedStatus = CmbFilStatus.getSelectedItem().toString(); // Get selected status
        try {
            List<Map<String, Object>> testRequests;

            if ("All".equals(selectedStatus)) {
                // Fetch all test requests if "All" is selected
                testRequests = labTechnicianService.getTestRequestsByTechnicianId(loggedInTechnicianId);
            } else {
                // Fetch filtered test requests for the selected status
                testRequests = labTechnicianService.getFilteredTestRequests(loggedInTechnicianId, selectedStatus);
            }

            // Populate the table with the fetched data
            DefaultTableModel model = (DefaultTableModel) TblTestRequests.getModel();
            model.setRowCount(0); // Clear existing rows

            for (Map<String, Object> request : testRequests) {
                model.addRow(new Object[]{
                    request.get("RequestID"),
                    request.get("TestType"),
                    request.get("PatientName"),
                    request.get("Status")
                });
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error filtering test requests: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_CmbFilStatusActionPerformed

    private void BtnUpdateStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateStatusActionPerformed
        int selectedRow = TblTestRequests.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get the request ID from the table
        int requestId = (int) TblTestRequests.getValueAt(selectedRow, 0);

        // Define possible statuses
        String[] statuses = {"In Progress", "Completed", "Pending Review", "Assigned", "Processed"};

        // Show a dropdown for selecting the new status
        String newStatus = (String) JOptionPane.showInputDialog(
                this,
                "Select the new status:",
                "Update Status",
                JOptionPane.PLAIN_MESSAGE,
                null,
                statuses,
                statuses[0] // Default selection
        );

        if (newStatus == null || newStatus.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No status selected!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Update the status using the service
            boolean success = labTechnicianService.updateTestRequestStatus(requestId, newStatus);
            if (success) {
                JOptionPane.showMessageDialog(this, "Status updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                populateTable(); // Refresh table after update
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update status!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnUpdateStatusActionPerformed

    private void BtnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnViewDetailsActionPerformed
        int selectedRow = TblTestRequests.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view details!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get the request ID from the table
        int requestId = (int) TblTestRequests.getValueAt(selectedRow, 0);

        try {
            // Fetch details using the service
            String details = labTechnicianService.getTestRequestDetails(requestId);

            // Display details in a dialog
            JOptionPane.showMessageDialog(this, details, "Test Request Details", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnViewDetailsActionPerformed

    private void BtnLogOut1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLogOut1ActionPerformed
        try {
            DatabaseUtil.closeConnection();
            JOptionPane.showMessageDialog(this, "Logged out successfully!");

            JPanel mainPanel = (JPanel) this.getParent();
            CardLayout layout = (CardLayout) mainPanel.getLayout();
            mainPanel.add(new LoginScreen(mainPanel), "LoginScreen");
            layout.show(mainPanel, "LoginScreen");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error while logging out: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnLogOut1ActionPerformed

    private void BtnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGenerateReportActionPerformed
        int selectedRow = TblTestRequests.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a test request to generate a report!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String status = TblTestRequests.getValueAt(selectedRow, 3).toString();

        if (!"In Progress".equalsIgnoreCase(status)) {
            JOptionPane.showMessageDialog(this, "Lab reports can only be created for test requests with status 'In Progress'.", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int requestId = (int) TblTestRequests.getValueAt(selectedRow, 0);
        selectedTestRequestId = requestId; // Store the selected request ID

        jTabbedPane1.setSelectedIndex(1);
        populateLabReportForm();
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnGenerateReportActionPerformed

    private void TxtRequestIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtRequestIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtRequestIDActionPerformed

    private void TxtTestTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtTestTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtTestTypeActionPerformed

    private void TxtTechIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtTechIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtTechIDActionPerformed

    private void TxtPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtPatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtPatientActionPerformed

    private void BtnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSubmitActionPerformed
    String result = TxtResult.getText().trim();

    if (result.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter the test result!", "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        if (selectedTestRequestId > 0) { // If a test request is selected
            // Check if the technician is updating an existing report
            boolean isUpdate = (TblReports.getSelectedRow() >= 0);

            boolean success;
            if (isUpdate) {
                // Update existing lab report
                int selectedReportId = (int) TblReports.getValueAt(TblReports.getSelectedRow(), 0);
                success = labTechnicianService.updateLabReport(selectedReportId, result);
            } else {
                // Create new lab report
                success = labTechnicianService.saveLabReport(selectedTestRequestId, loggedInTechnicianId, result);
            }

            if (success) {
                JOptionPane.showMessageDialog(this, isUpdate ? "Lab report updated successfully!" : "Lab report submitted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                clearLabReportForm();
                populateReportsTable();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to save the lab report!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No test request selected!", "Error", JOptionPane.WARNING_MESSAGE);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnSubmitActionPerformed

    private void BtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnClearActionPerformed
        clearLabReportForm();
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnClearActionPerformed

    private void BtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBackActionPerformed
        jTabbedPane1.setSelectedIndex(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnBackActionPerformed

    private void BtnResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnResultActionPerformed
        int selectedRow = TblReports.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view the result!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get the ReportID from the selected row
        int reportId = (int) TblReports.getValueAt(selectedRow, 0); // Assuming "ReportID" is in the first column

        try {
            // Fetch the result from the LabTechnicianService
            String result = labTechnicianService.getLabReportResultById(reportId);

            // Display the result in a JOptionPane
            JOptionPane.showMessageDialog(this, result, "Lab Report Result", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving lab report result: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnResultActionPerformed

    private void CmbFilDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CmbFilDateActionPerformed
        String selectedFilter = (String) CmbFilDate.getSelectedItem();

        try {
            List<Map<String, Object>> filteredReports;

            // Call service method to fetch filtered reports
            filteredReports = labTechnicianService.getLabReportsFilteredByDate(selectedFilter);

            // Populate the table with the filtered data
            populateReportsTable(filteredReports);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error applying filter: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_CmbFilDateActionPerformed

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed
    int selectedRow = TblReports.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a lab report to update!", "Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    int reportId = (int) TblReports.getValueAt(selectedRow, 0); 
    int requestId = (int) TblReports.getValueAt(selectedRow, 1);

    try {
        String existingResult = labTechnicianService.getLabReportResultById(reportId);

        selectedTestRequestId = requestId; 
        jTabbedPane1.setSelectedIndex(1); 

        Map<String, Object> testRequestDetails = labTechnicianService.getTestRequestDetailsById(requestId);
        TxtRequestID.setText(testRequestDetails.get("RequestID").toString());
        TxtTestType.setText(testRequestDetails.get("TestType").toString());
        TxtPatient.setText(testRequestDetails.get("PatientName").toString());
        TxtTechID.setText(String.valueOf(loggedInTechnicianId));
        TxtDate.setText(new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date()));
        TxtResult.setText(existingResult);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading lab report details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnUpdateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBack;
    private javax.swing.JButton BtnClear;
    private javax.swing.JButton BtnGenerateReport;
    private javax.swing.JButton BtnLogOut1;
    private javax.swing.JButton BtnResult;
    private javax.swing.JButton BtnSubmit;
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JButton BtnUpdateStatus;
    private javax.swing.JButton BtnViewDetails;
    private javax.swing.JComboBox<String> CmbFilDate;
    private javax.swing.JComboBox<String> CmbFilStatus;
    private javax.swing.JLabel LblDate;
    private javax.swing.JLabel LblPatient;
    private javax.swing.JLabel LblRequestID;
    private javax.swing.JLabel LblResult;
    private javax.swing.JLabel LblTechID;
    private javax.swing.JLabel LblTestType;
    private javax.swing.JTable TblReports;
    private javax.swing.JTable TblTestRequests;
    private javax.swing.JTextField TxtDate;
    private javax.swing.JTextField TxtPatient;
    private javax.swing.JTextField TxtRequestID;
    private javax.swing.JTextArea TxtResult;
    private javax.swing.JTextField TxtTechID;
    private javax.swing.JTextField TxtTestType;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void populateLabReportForm() {
        if (selectedTestRequestId == -1) {
            JOptionPane.showMessageDialog(this, "No test request selected!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            Map<String, Object> testRequestDetails = labTechnicianService.getTestRequestDetailsById(selectedTestRequestId);

            TxtRequestID.setText(testRequestDetails.get("RequestID").toString());
            TxtTestType.setText(testRequestDetails.get("TestType").toString());
            TxtPatient.setText(testRequestDetails.get("PatientName").toString());
            TxtTechID.setText(String.valueOf(loggedInTechnicianId));
            TxtDate.setText(new java.text.SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date()));
            TxtResult.setText("");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading test request details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearLabReportForm() {
        TxtResult.setText("");
    }

    private void populateReportsTable() {
        try {
            // Fetch all lab reports using the service
            List<Map<String, Object>> labReports = labTechnicianService.getAllLabReports();

            // Populate the table
            populateReportsTable(labReports);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading lab reports.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void populateReportsTable(List<Map<String, Object>> labReports) {
        DefaultTableModel model = (DefaultTableModel) TblReports.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Map<String, Object> report : labReports) {
            model.addRow(new Object[]{
                report.get("ReportID"),
                report.get("RequestID"),
                report.get("TestType"),
                report.get("PatientName"),
                report.get("TechnicianName"),
                report.get("GeneratedDate")
            });
        }
    }

}
