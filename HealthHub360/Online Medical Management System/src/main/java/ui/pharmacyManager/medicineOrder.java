/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.pharmacyManager;

import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.User;
import modelPharmacyEnterprise.Medicine;
import modelPharmacyEnterprise.MedicineOrder;
import modelPharmacyEnterpriseDAO.MedicineDAO;
import modelPharmacyEnterpriseService.MedicineOrderService;
import modelPharmacyEnterpriseService.MedicineService;

/**
 *
 * @author keerthichandrakanth
 */
public class medicineOrder extends javax.swing.JPanel {
     private User loggedInUser;
     JPanel mainWorkArea;

    /**
     * Creates new form medicineOrder
     */
    public medicineOrder(JPanel mainWorkArea,User currentUser ) {
        this.mainWorkArea = mainWorkArea;
        this.loggedInUser = currentUser;
        initComponents();
        populateComboboxMedicine();

        populateOrdersTable("All");
        
    }
    
    private void populateOrdersTable(String filterStatus) {

    // Assuming you have a method to get the logged-in user's ID
    int userId = loggedInUser.getId();   // Replace with actual logic for fetching the logged-in user's ID

    // Get the orders for this user
    MedicineOrderService orderService = new MedicineOrderService();
    MedicineService medicineService = new MedicineService(); 
    List<MedicineOrder> orders = orderService.getOrdersForUser(userId);

    // Set up table model
    DefaultTableModel model = (DefaultTableModel) tblMedicineOrder.getModel();
    model.setRowCount(0); // Clear existing rows

    // Add rows to the table
    for (MedicineOrder order : orders) {

        
       if ("All".equals(filterStatus) || order.getStatus().equalsIgnoreCase(filterStatus)) {
            Medicine medicine = medicineService.getMedicineById(order.getMedicineId());
            model.addRow(new Object[]{
                order.getId(),
                medicine != null ? medicine.getName() : "Unknown",
                order.getQuantity(),
                order.getOrderDate(),
                order.getStatus()
            });
        }

        
    }
   
}

    


    
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblMedicine = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        cmbMedicine = new javax.swing.JComboBox<>();
        btnSubmit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMedicineOrder = new javax.swing.JTable();
        btnReceivedOrder = new javax.swing.JButton();
        cbmFilterMedicineOrder = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(247, 249, 252));

        jLabel1.setText(" Order the Medicine ");

        lblMedicine.setText("Medicine ");

        lblQuantity.setText("Quantity");

        cmbMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMedicineActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit Order");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        tblMedicineOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Medicine Name", "Quantity", "Order date ", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblMedicineOrder);

        btnReceivedOrder.setText("Received Order");
        btnReceivedOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReceivedOrderActionPerformed(evt);
            }
        });

        cbmFilterMedicineOrder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Order Placed", "Received", " " }));
        cbmFilterMedicineOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbmFilterMedicineOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(421, 421, 421)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(393, 393, 393)
                        .addComponent(lblQuantity)
                        .addGap(18, 18, 18)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(387, 387, 387)
                        .addComponent(lblMedicine)
                        .addGap(18, 18, 18)
                        .addComponent(cmbMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(408, 408, 408)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnReceivedOrder)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(cbmFilterMedicineOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jLabel3)
                        .addGap(332, 332, 332))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cbmFilterMedicineOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQuantity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReceivedOrder)
                .addGap(96, 96, 96))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
       
         try {
       
        Medicine selectedMedicine = (Medicine) cmbMedicine.getSelectedItem();
        if (selectedMedicine == null) {
            JOptionPane.showMessageDialog(this, "Please select a medicine.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String quantityText = txtQuantity.getText().trim();
        if (quantityText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Quantity cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!quantityText.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid numeric quantity.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int quantity = Integer.parseInt(quantityText);
         int userId = loggedInUser.getId(); 
        java.sql.Date orderDate = new java.sql.Date(System.currentTimeMillis());
         String status = "Order Placed";
         MedicineOrderService orderService = new MedicineOrderService();
        orderService.placeOrder(selectedMedicine.getId(), quantity, orderDate, status, userId);

        JOptionPane.showMessageDialog(this, "Order placed successfully!");
        txtQuantity.setText(""); // Clear the quantity field
        cmbMedicine.setSelectedIndex(0); // Reset combo box selection
    } catch (NumberFormatException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Please enter a valid numeric quantity.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getClass().getSimpleName() + ": " + e.getMessage(), 
                                      "Error", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void cmbMedicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMedicineActionPerformed
     
    }//GEN-LAST:event_cmbMedicineActionPerformed

    private void btnReceivedOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReceivedOrderActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblMedicineOrder.getSelectedRow();
     if (selectedRow != -1) {
      // Get the order ID from the first column of the selected row
      Object orderIdObject = tblMedicineOrder.getValueAt(selectedRow, 0);

    // Check if the value is an integer or a string and convert it accordingly
     int orderId = -1;
    if (orderIdObject instanceof Integer) {
        orderId = (int) orderIdObject;
    } else if (orderIdObject instanceof String) {
        try {
            orderId = Integer.parseInt((String) orderIdObject);  // If it's a String, try to parse it as an Integer
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Order ID format.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit if there's a format issue
        }
    }

    if (orderId != -1) {
        // Create an instance of the service layer
        MedicineOrderService orderService = new MedicineOrderService();

        try {
            // Update the order status and medicine quantity
            orderService.updateOrderStatusToReceived(orderId);

  


            JOptionPane.showMessageDialog(this, "Order marked as Received and medicine quantity updated.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
} else {
    JOptionPane.showMessageDialog(this, "Please select an order to update.", "Error", JOptionPane.WARNING_MESSAGE);
}
          
    }//GEN-LAST:event_btnReceivedOrderActionPerformed


    private void cbmFilterMedicineOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbmFilterMedicineOrderActionPerformed
        // TODO add your handling code here:
              String selectedStatus = (String) cbmFilterMedicineOrder.getSelectedItem();
             populateOrdersTable(selectedStatus); 
    }//GEN-LAST:event_cbmFilterMedicineOrderActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReceivedOrder;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cbmFilterMedicineOrder;
    private javax.swing.JComboBox<Medicine> cmbMedicine;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMedicine;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JTable tblMedicineOrder;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

    

    private void populateComboboxMedicine() {
         cmbMedicine.removeAllItems(); // Clear previous items
         MedicineService medicineService = new MedicineService();
          List<Medicine> medicines = medicineService.getAllMedicines(); 
    
    // Add each Medicine object to the combo box
    for (Medicine medicine : medicines) {
         cmbMedicine.addItem(medicine); // Add the whole Medicine object
    }
    }
         

}
