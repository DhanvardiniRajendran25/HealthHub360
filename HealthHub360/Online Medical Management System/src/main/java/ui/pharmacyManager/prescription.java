/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.pharmacyManager;

import java.sql.SQLException;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import modelPharmacyEnterprise.Prescription;
import modelPharmacyEnterpriseDAO.PrescriptionAssignmentDAO;
import modelPharmacyEnterpriseDAO.PrescriptionDAO;
import modelPharmacyEnterpriseService.PrescriptionAssignmentService;
import modelPharmacyEnterpriseService.PrescriptionService;

/**
 *
 * @author keerthichandrakanth
 */
public class prescription extends javax.swing.JPanel {
     JPanel mainWorkArea;
     private List<Prescription> prescriptions;
     PrescriptionAssignmentService prescriptionAssignmentService = new PrescriptionAssignmentService();
     PrescriptionDAO prescriptionDAO = new PrescriptionDAO();
     PrescriptionService prescriptionService = new PrescriptionService(prescriptionDAO);

     
     

     
    /**
     * Creates new form prescription
     */
    public prescription(JPanel mainWorkArea,List<Prescription> prescriptions) throws SQLException {
        initComponents();
        this.mainWorkArea = mainWorkArea;
        this.prescriptionAssignmentService = new PrescriptionAssignmentService();
        this.prescriptions = prescriptions;
        populatePharmacistComboBox();  
        populatePrescription("All");
    }
    
     private void populatePharmacistComboBox() {
        List<String> pharmacists = prescriptionAssignmentService.getAllPharmacistNames();
    
      // Debugging to check if data is fetched properly
     if (pharmacists == null || pharmacists.isEmpty()) {
        System.out.println("No pharmacists found.");
    } else {
        System.out.println("Found pharmacists: " + pharmacists);
    }

    cmbPharmacist.removeAllItems(); // Clear previous items
    for (String pharmacist : pharmacists) {
        cmbPharmacist.addItem(pharmacist);
    }
    }
    
  void populatePrescription(String filterStatus) {
    DefaultTableModel model = (DefaultTableModel) tblPrescription.getModel();
    model.setRowCount(0); // Clear existing rows

    for (Prescription prescription : prescriptions) {
        try {
            // Fetch the assigned pharmacist's name
           if ("All".equals(filterStatus) || prescription.getStatus().equals(filterStatus)){  
            String assignedPharmacist = prescriptionAssignmentService.getAssignedPharmacistName(prescription.getId());
            if (assignedPharmacist == null || "Not Assigned".equals(assignedPharmacist)) {
                assignedPharmacist = "Not Assigned"; // Default display if no pharmacist is assigned
            }

            // Add prescription details along with the pharmacist name to the table
            model.addRow(new Object[]{
                prescription.getId(),
                prescription.getPatientName(),
                prescription.getDoctorName(),
                prescription.getDateRequested(),
                prescription.getStatus(),
                assignedPharmacist // Populate the last column with the pharmacist name
            });
           
           }

        } catch (SQLException e) {
            // Handle any errors that occur during the fetching process
            JOptionPane.showMessageDialog(null, "Error fetching assigned pharmacist: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }
  

   

 /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrescription = new javax.swing.JTable();
        btnAssigntoPharmacist = new javax.swing.JButton();
        cmbPharmacist = new javax.swing.JComboBox<>();
        cmbFilterPrescription = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(247, 249, 252));

        tblPrescription.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Patient Name", "Doctor Name", "Requested date", "Status", "Assigned Pharmacist "
            }
        ));
        jScrollPane1.setViewportView(tblPrescription);

        btnAssigntoPharmacist.setText("Assign ");
        btnAssigntoPharmacist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssigntoPharmacistActionPerformed(evt);
            }
        });

        cmbPharmacist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPharmacistActionPerformed(evt);
            }
        });

        cmbFilterPrescription.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Assigned to pharmacist", "Complete", "Pending" }));
        cmbFilterPrescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFilterPrescriptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmbFilterPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 981, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
            .addGroup(layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(btnAssigntoPharmacist, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(cmbPharmacist, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(cmbFilterPrescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAssigntoPharmacist)
                    .addComponent(cmbPharmacist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnAssigntoPharmacistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssigntoPharmacistActionPerformed
        int selectedRow = tblPrescription.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a prescription from the table.");
        return;
    }

    String selectedPharmacist = (String) cmbPharmacist.getSelectedItem();
    if (selectedPharmacist == null || selectedPharmacist.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please select a pharmacist.");
        return;
    }
    
    Prescription selectedPrescription = prescriptions.get(selectedRow);
try {
    // Check if a pharmacist is already assigned
    String assignedPharmacist = prescriptionAssignmentService.getAssignedPharmacistName(selectedPrescription.getId());
    
    if (assignedPharmacist == null || "Not Assigned".equals(assignedPharmacist)) {
        // If not assigned, proceed with assignment
        int pharmacistId = prescriptionAssignmentService.getPharmacistIdByName(selectedPharmacist);
        
        prescriptionAssignmentService.assignPrescription(selectedPrescription.getId(), pharmacistId);
        prescriptionService.updatePrescriptionStatus(selectedPrescription.getId(), "Assigned to pharmacist");
        
        tblPrescription.setValueAt(selectedPharmacist, selectedRow, 4);
        tblPrescription.setValueAt("Assigned to pharmacist", selectedRow, 3);
        
        JOptionPane.showMessageDialog(this, "Prescription assigned to " + selectedPharmacist + ".");
    } else {
        // Inform the user that the prescription is already assigned
        JOptionPane.showMessageDialog(this, "This prescription is already assigned to " + assignedPharmacist + ".");
    }
    
} catch (SQLException e) {
    JOptionPane.showMessageDialog(this, "Error assigning prescription: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    ex.printStackTrace();
}
    }//GEN-LAST:event_btnAssigntoPharmacistActionPerformed

    private void cmbPharmacistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPharmacistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPharmacistActionPerformed


    private void cmbFilterPrescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFilterPrescriptionActionPerformed
        // TODO add your handling code here:
            String selectedStatus = (String) cmbFilterPrescription.getSelectedItem();
             populatePrescription(selectedStatus); 
    }//GEN-LAST:event_cmbFilterPrescriptionActionPerformed

     
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssigntoPharmacist;
    private javax.swing.JComboBox<String> cmbFilterPrescription;
    private javax.swing.JComboBox<String> cmbPharmacist;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPrescription;
    // End of variables declaration//GEN-END:variables
  
}
