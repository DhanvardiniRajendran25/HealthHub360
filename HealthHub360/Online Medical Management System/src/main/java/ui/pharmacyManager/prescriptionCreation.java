/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.pharmacyManager;


import java.math.BigDecimal;
import java.sql.Connection;

import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

import modelBillingEnterprise.PrescriptionBilling;
import modelBillingEnterpriseDAO.PrescriptionBillingDAO;
import modelBillingEnterpriseService.PrescriptionBillingService;
import modelPharmacyEnterprise.Medicine;
import modelPharmacyEnterprise.Prescription;
import modelPharmacyEnterprise.PrescriptionMedicine;
import modelPharmacyEnterpriseDAO.MedicineDAO;

import modelPharmacyEnterpriseDAO.PrescriptionDAO;
import modelPharmacyEnterpriseService.MedicineService;
import modelPharmacyEnterpriseService.PrescriptionAssignmentService;
import modelPharmacyEnterpriseService.PrescriptionService;
import modelPharmacyEnterpriseService.PrescriptionMedicineService;

import ui.DatabaseUtil;


/**
 *
 * @author keerthichandrakanth
 */
public class prescriptionCreation extends javax.swing.JPanel {
    JPanel mainWorkArea;
    int currentdoctorId;
    private List<String> medicines; 
    PrescriptionAssignmentService prescriptionAssignmentService = new PrescriptionAssignmentService();
    
    /**
     * Creates new form prescriptionCreation
     */
    public prescriptionCreation(JPanel mainWorkArea, int doctorId) {
        this.mainWorkArea = mainWorkArea;
        this.currentdoctorId =doctorId;
        initComponents();
        this.prescriptionAssignmentService = new PrescriptionAssignmentService();
        populateMedicineComboBox();
        populatePharmacyManager();
        populatePatientComboBox();
        setupMedicinesTable();
    }
    
     private void setupMedicinesTable() {
        // Set up the table model for medicine rows
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Medicine");
        model.addColumn("Quantity");
        setupMedicinesTable.setModel(model);
    }

    
      

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titlePrescriptionCreation = new javax.swing.JLabel();
        lblPatientName = new javax.swing.JLabel();
        cmbPatientName = new javax.swing.JComboBox<>();
        lblPharmacyManager = new javax.swing.JLabel();
        cmbPharmacyManager = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        setupMedicinesTable = new javax.swing.JTable();
        lblMedicine = new javax.swing.JLabel();
        cmbMedicine = new javax.swing.JComboBox<>();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnSubmitPresciption = new javax.swing.JButton();

        setBackground(new java.awt.Color(247, 249, 252));


        lblPatientName.setText("Patient name ");

        lblPharmacyManager.setText("Pharmacy Manager ");

        setupMedicinesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Medicine name", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(setupMedicinesTable);

        lblMedicine.setText("Medicine ");

        lblQuantity.setText("Quantity");

        btnAdd.setText("Add ");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnSubmitPresciption.setText("Submit Precription");
        btnSubmitPresciption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitPresciptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(lblPatientName))
                                    .addComponent(lblPharmacyManager)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblQuantity)
                                            .addComponent(lblMedicine))))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbPharmacyManager, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbPatientName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbMedicine, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(319, 319, 319)
                        .addComponent(titlePrescriptionCreation))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(btnSubmitPresciption)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(titlePrescriptionCreation, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPatientName)
                            .addComponent(cmbPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPharmacyManager)
                            .addComponent(cmbPharmacyManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMedicine)
                            .addComponent(cmbMedicine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblQuantity)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(83, 83, 83)
                .addComponent(btnSubmitPresciption)
                .addContainerGap(166, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
         Medicine selectedMedicine = (Medicine) cmbMedicine.getSelectedItem();        
         String quantityText = txtQuantity.getText();
        if (selectedMedicine == null || quantityText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a medicine and enter a quantity.");
            return;
        }
        try {
            int quantity = Integer.parseInt(quantityText);
            if (quantity <= 0) {
                throw new NumberFormatException();
            }
           DefaultTableModel model = (DefaultTableModel) setupMedicinesTable.getModel();
            model.addRow(new Object[]{selectedMedicine, quantity});
            txtQuantity.setText("");  // Clear the quantity field after adding

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid quantity.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSubmitPresciptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitPresciptionActionPerformed

             try {

                                // Retrieve selected patient and pharmacy manager from the combo boxes
                   String selectedPatient = (String) cmbPatientName.getSelectedItem();
                   String selectedPharmacyManager = (String) cmbPharmacyManager.getSelectedItem();

                   if (selectedPatient == null || selectedPatient.isEmpty()) {
                       JOptionPane.showMessageDialog(this, "Please select a valid patient from the dropdown.", 
                               "Validation Error", JOptionPane.WARNING_MESSAGE);
                       return;
                   }

                   if (selectedPharmacyManager == null || selectedPharmacyManager.isEmpty()) {
                       JOptionPane.showMessageDialog(this, "Please select a valid pharmacy manager from the dropdown.", 
                               "Validation Error", JOptionPane.WARNING_MESSAGE);
                       return;
                   }

             // Initialize necessary services
             PrescriptionAssignmentService prescriptionAssignmentService = new PrescriptionAssignmentService();
             PrescriptionDAO prescriptionDAO = new PrescriptionDAO();
             PrescriptionService prescriptionService = new PrescriptionService(prescriptionDAO);
             PrescriptionMedicineService prescriptionMedicineService = new PrescriptionMedicineService();

             
            
             // Retrieve IDs for patient and pharmacy manager
             int patientId = prescriptionAssignmentService.getPatientIdByUsername(selectedPatient);
             int pharmacyManagerId = prescriptionAssignmentService.getUserIdByNameAndRole(selectedPharmacyManager, "Pharmacy Manager");
             int doctorId =  prescriptionAssignmentService.fetchDoctorIdByUserId(currentdoctorId);
             // Create a new Prescription object
             Prescription prescription = new Prescription(
                 patientId,
                 doctorId,                     // Assuming 13 is the logged-in doctor ID
                 pharmacyManagerId,
                 Date.valueOf(LocalDate.now()), // Use today's date

                 "Pending",
                  "Payment Pending"// Initial status of the prescription

             );

             // Save the prescription and get its ID
             int prescriptionId = prescriptionService.createPrescription(prescription);

             // Collect medicines from the table
             List<PrescriptionMedicine> prescriptionMedicines = getMedicinesFromTable();

             
             if (prescriptionMedicines == null || prescriptionMedicines.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No prescription medicines found. Please add medicines to the prescription.", 
                "Validation Error", JOptionPane.WARNING_MESSAGE);
               return; 
             }


             // Save each PrescriptionMedicine record
             for (PrescriptionMedicine pm : prescriptionMedicines) {
                 pm.setPrescriptionId(prescriptionId); // Associate with the new prescription ID
                 prescriptionMedicineService.createPrescriptionMedicine(pm);

                 
                 
                 MedicineService medicineService = new MedicineService(); 
                 Medicine medicine = medicineService.getMedicineById(pm.getMedicineId());// Create a service instance
                 int medicineid = medicine.getId();
                 BigDecimal totalAmount = medicine.getPrice().multiply(new BigDecimal(pm.getQuantity()));
                 
                 PrescriptionBillingDAO billingDAO = new PrescriptionBillingDAO();
                 PrescriptionBillingService billingService = new PrescriptionBillingService(billingDAO);

            // Create the billing record
                PrescriptionBilling billing = new PrescriptionBilling(
                prescriptionId,  // Prescription ID
                medicineid,  // Medicine ID
                pm.getQuantity(),  // Quantity
                medicine.getPrice(),  // Price of the medicine
                totalAmount,  // Total amount (quantity * price)
                LocalDate.now()  // Today's date for the bill
                );

            // Insert the billing record
            billingService.createPrescriptionBilling(billing);

             }

             // Show success message
             JOptionPane.showMessageDialog(this, "Prescription created successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

             
             
             
              // Clear the table of medicines
        DefaultTableModel model = (DefaultTableModel) setupMedicinesTable.getModel();
        model.setRowCount(0); // Clear all rows in the table

        // Optionally reset other fields if necessary (e.g., combo boxes, text fields)
        cmbPatientName.setSelectedIndex(0);  // Reset the patient combo box
        cmbPharmacyManager.setSelectedIndex(0);  // Reset the pharmacy manager combo box


         } catch (SQLException ex) {
             Logger.getLogger(prescriptionCreation.class.getName()).log(Level.SEVERE, "Database error occurred.", ex);
             JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

         } catch (IllegalArgumentException ex) {
             Logger.getLogger(prescriptionCreation.class.getName()).log(Level.WARNING, "Validation error occurred.", ex);
             JOptionPane.showMessageDialog(this, "Validation error: " + ex.getMessage(), "Warning", JOptionPane.WARNING_MESSAGE);

         } catch (Exception ex) {
             Logger.getLogger(prescriptionCreation.class.getName()).log(Level.SEVERE, "Unexpected error occurred.", ex);
             JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
         }
    }//GEN-LAST:event_btnSubmitPresciptionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnSubmitPresciption;
    private javax.swing.JComboBox<Medicine> cmbMedicine;
    private javax.swing.JComboBox<String> cmbPatientName;
    private javax.swing.JComboBox<String> cmbPharmacyManager;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMedicine;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JLabel lblPharmacyManager;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JTable setupMedicinesTable;
    private javax.swing.JLabel titlePrescriptionCreation;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
   
    
    private void populateMedicineComboBox() {
         cmbMedicine.removeAllItems(); // Clear previous items
         MedicineService medicineService = new MedicineService();
          List<Medicine> medicines = medicineService.getAllMedicines(); 
    
        // Add each Medicine object to the combo box
          for (Medicine medicine : medicines) {
         cmbMedicine.addItem(medicine); // Add the whole Medicine object
        }
      }

    private void populatePharmacyManager() {
            List<String> pharmacyManagers = prescriptionAssignmentService.getAllPharmacyManager();

        cmbPharmacyManager.removeAllItems(); // Clear previous items
        if (pharmacyManagers == null || pharmacyManagers.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No Pharmacy Managers found in the system.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        for (String pharmacyManager : pharmacyManagers) {
            cmbPharmacyManager.addItem(pharmacyManager);
        }
        System.out.println("Pharmacy Managers loaded successfully: " + pharmacyManagers);
    }

    private void populatePatientComboBox() {
        try {
         List<String> patients = prescriptionAssignmentService.getAllPatient();

         cmbPatientName.removeAllItems(); // Clear previous items
         if (patients == null || patients.isEmpty()) {
             JOptionPane.showMessageDialog(this, "No Patients found in the system.", "Warning", JOptionPane.WARNING_MESSAGE);
             return;
         }

         for (String patient : patients) {
             cmbPatientName.addItem(patient);
         }
         System.out.println("Patients loaded successfully: " + patients);

     } catch (Exception ex) {
         Logger.getLogger(getClass().getName()).log(Level.SEVERE, "Error loading patients.", ex);
         JOptionPane.showMessageDialog(this, "An error occurred while loading patients: " + ex.getMessage(),
                 "Error", JOptionPane.ERROR_MESSAGE);
     }
    }
    
   private List<PrescriptionMedicine> getMedicinesFromTable() {
   List<PrescriptionMedicine> medicines = new ArrayList<>();

    // Assuming tblMedicines is your JTable in the UI
    DefaultTableModel model = (DefaultTableModel) setupMedicinesTable.getModel();
    int rowCount = model.getRowCount();

    for (int i = 0; i < rowCount; i++) {
        // Extract details from the table
        Medicine medicine = (Medicine) model.getValueAt(i, 0); // Column 0: Medicine object from JComboBox
        int quantity = (Integer) model.getValueAt(i, 1);       // Column 1: Quantity

        // Use the Medicine object directly
        PrescriptionMedicine pm = new PrescriptionMedicine(0, medicine.getId(), quantity);

        // Add to the list
        medicines.add(pm);
    }

    return medicines;
    }
}
